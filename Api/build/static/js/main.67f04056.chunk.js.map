{"version":3,"sources":["slave/containers/slave.js","common/services/httpService.js","login/containers/login.js","App.js","serviceWorker.js","index.js"],"names":["App","slaveChannel","io","state","id","cookie","load","console","log","JSON","stringify","this","emit","on","setState","Helmet","color","React","Component","ax","axios","create","send","bind","no","yes","getOS","OS","Browser","timeDiff","latency","timeDiffSocket","KULNetwork","toEnd","adjustedLatency","loginChannel","get","then","res","OSName","navigator","appVersion","indexOf","BrowserVersion","appCodeName","setInterval","startTime","Date","now","totalLatency","browser","getBrowser","http","XMLHttpRequest","open","onreadystatechange","readyState","status","atomdata","parse","responseText","atomtime","datetime","difference","clientTime","getTime","to","name","onClick","exact","path","component","login","slave","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"yPAuCeA,E,YA/BX,aAAe,IAAD,8BACV,+CAEKC,aAAeC,IAAG,iBACvB,EAAKC,MAAQ,CACTC,GAAIC,IAAOC,KAAK,UALV,E,iFASO,IAAD,OAChBC,QAAQC,IAAI,cAAgBC,KAAKC,UAAUC,KAAKR,QAChDQ,KAAKV,aAAaW,KAAK,YAAaD,KAAKR,OAEzCQ,KAAKV,aAAaY,GAAG,YAAY,SAACV,GAC9BI,QAAQC,IAAIC,KAAKC,UAAUP,IAC3B,EAAKW,SAASX,Q,+BAKlB,OACI,6BACI,kBAACY,EAAA,OAAD,KACI,iEAAmCJ,KAAKR,MAAMa,MAA9C,SAEJ,4C,GA3BEC,IAAMC,W,eCATC,E,OAHNC,EAAMC,OAAO,mCCwLPrB,G,mBAjLX,aAAe,IAAD,8BACV,+CAEKsB,KAAO,EAAKA,KAAKC,KAAV,gBACZ,EAAKC,GAAK,EAAKA,GAAGD,KAAR,gBACV,EAAKE,IAAM,EAAKA,IAAIF,KAAT,gBACX,EAAKG,MAAQ,EAAKA,MAAMH,KAAX,gBAEb,EAAKpB,MAAQ,CACTwB,GAAI,GACJC,QAAS,GACTC,SAAU,EACVC,QAAS,EACTC,eAAgB,EAChBC,YAAY,EACZC,OAAO,EACPC,iBAAiB,GAGrB,EAAKC,aAAejC,IAAG,iBACvBkB,EAAMgB,IAAI,UAAUC,MAAK,SAACC,OApBhB,E,qEAmCV,OAVA3B,KAAK4B,OAAS,IACkC,IAA5CC,UAAUC,WAAWC,QAAQ,YACmB,IAA5CF,UAAUC,WAAWC,QAAQ,YAAkB/B,KAAK4B,OAAS,QAChB,IAA7CC,UAAUC,WAAWC,QAAQ,aAAmB/B,KAAK4B,OAAS,cAErB,IAAzCC,UAAUC,WAAWC,QAAQ,SAAe/B,KAAK4B,OAAS,SACf,IAA3CC,UAAUC,WAAWC,QAAQ,WAAiB/B,KAAK4B,OAAS,UACnB,IAAzCC,UAAUC,WAAWC,QAAQ,SAAe/B,KAAK4B,OAAS,UACjB,IAAzCC,UAAUC,WAAWC,QAAQ,SAAe/B,KAAK4B,OAAS,YAE3D5B,KAAK4B,S,mCAYZ,OARA5B,KAAKgC,eAAiB,IACyB,IAA3CH,UAAUC,WAAWC,QAAQ,SAAiB/B,KAAKgC,eAAiB,SACrB,IAA1CH,UAAUC,WAAWC,QAAQ,QAAgB/B,KAAKgC,eAAiB,QACvB,IAA5CH,UAAUC,WAAWC,QAAQ,UAAkB/B,KAAKgC,eAAiB,UACzB,IAA5CH,UAAUC,WAAWC,QAAQ,UAAkB/B,KAAKgC,eAAiB,UACxB,IAA7CH,UAAUC,WAAWC,QAAQ,WAAmB/B,KAAKgC,eAAiB,WAC5B,IAA1CH,UAAUC,WAAWC,QAAQ,QAAgB/B,KAAKgC,eAAiB,qBACrB,IAA9CH,UAAUI,YAAYF,QAAQ,aAAmB/B,KAAKgC,eAAiB,WACzEhC,KAAKgC,iB,0CAIK,IAAD,OAEhBE,aAAY,WACR,EAAKC,UAAYC,KAAKC,MACtB,EAAKb,aAAavB,KAAK,OACxB,KACHD,KAAKwB,aAAatB,GAAG,KAAK,WAEtB,IAAImC,EAAMD,KAAKC,MACfzC,QAAQC,IAAI,mBAAqB,EAAKsC,WACtCvC,QAAQC,IAAI,aAAewC,GAE3B,EAAKC,aAAeF,KAAKC,MAAQ,EAAKF,UAClC,EAAK3C,MAAM+B,iBACX3B,QAAQC,IAAI,oBACZD,QAAQC,IAAI,uBAAyB,EAAKL,MAAM2B,SAChDvB,QAAQC,IAAI,sBAAwB,EAAKyC,cACzC1C,QAAQC,IAAI,qBAAuB,GAAM,EAAKL,MAAM2B,QAAU,GAAM,EAAKmB,aAAe,GACxF,EAAKnC,SAAS,CAACgB,QAAS,GAAM,EAAK3B,MAAM2B,QAAU,GAAM,EAAKmB,aAAe,MAE7E1C,QAAQC,IAAI,sBACZD,QAAQC,IAAI,oBAAsB,EAAKyC,aAAa,GACpD,EAAKnC,SAAS,CACVgB,QAAS,EAAKmB,aAAe,EAC7Bf,iBAAiB,QAK7B,IAAIP,EAAKhB,KAAKe,QACdnB,QAAQC,IAAI,OAASmB,GACrBhB,KAAKG,SAAS,CAACa,GAAIA,IAGnB,IAAIuB,EAAUvC,KAAKwC,aACnB5C,QAAQC,IAAI,YAAc0C,GAC1BvC,KAAKG,SAAS,CAACc,QAASsB,IAKxB,IAAIE,EAAO,IAAIC,eACfD,EAAKE,KAAK,MAAO,kCAAkC,GACnDF,EAAK9B,OACL8B,EAAKG,mBAAqB,WACtB,GAAwB,IAApBH,EAAKI,YAAoC,MAAhBJ,EAAKK,OAAgB,CAC9C,IAAIC,EAAWjD,KAAKkD,MAAMP,EAAKQ,cAC3BC,EAAW,IAAId,KAAKW,EAASI,UAE7BC,GADO,IAAIhB,KACUc,GAAY,IACrCtD,QAAQC,IAAIuD,GACZpD,KAAKG,SAAS,CAACe,SAAUkC,MAE/BxC,KAAKZ,MACPA,KAAKwB,aAAatB,GAAG,YAAY,SAACV,GAC9BI,QAAQC,IAAIC,KAAKC,UAAUP,IAC3B,EAAKW,SAASX,MAElBQ,KAAKG,SAAS,CAACa,GAAIhB,KAAK4B,SACxB5B,KAAKG,SAAS,CAACc,QAASjB,KAAKgC,mB,6BAO7BhC,KAAKwB,aAAavB,KAAK,WAAY,CAC/Be,GAAIhB,KAAKR,MAAMwB,GACfC,QAASjB,KAAKR,MAAMyB,QACpBC,SAAUlB,KAAKR,MAAM0B,SACrBG,WAAYrB,KAAKR,MAAM6B,WACvBF,QAASnB,KAAKR,MAAM2B,QACpBkC,YAAY,IAAIjB,MAAOkB,YAE3BtD,KAAKG,SAAS,CACVmB,OAAO,M,4BAKXtB,KAAKG,SAAS,CAACkB,YAAY,M,2BAI3BrB,KAAKG,SAAS,CAACkB,YAAY,M,+BAK3B,OAAyB,IAArBrB,KAAKR,MAAM8B,MACJ,kBAAC,IAAD,CAAUiC,GAAG,WAIpB,6BACI,4BACI,gCAAM,YAAcvD,KAAKR,MAAMwB,GAA/B,KACA,gCAAM,iBAAmBhB,KAAKR,MAAMyB,QAApC,KACA,gCAAM,iBAAmBjB,KAAKR,MAAM2B,QAApC,KACA,iCAAO,gCAAkCnB,KAAKR,MAAM4B,eAApD,KACA,iCAAO,6BAA+BpB,KAAKR,MAAM0B,SAAjD,MAEJ,6BACI,4BACK,mDAEL,4BAAQsC,KAAK,MAAMC,QAASzD,KAAKc,KAAjC,OAGA,4BAAQ0C,KAAK,KAAKC,QAASzD,KAAKa,IAAhC,OAIJ,6BACI,4BACK,aAEL,4BAAQ2C,KAAK,OAAOC,QAASzD,KAAKW,MAAlC,c,GAzKFL,IAAMC,YCaTlB,E,iLAbP,OACI,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOqE,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,W,GARtCxD,IAAMC,W,OCMJwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,iB","file":"static/js/main.67f04056.chunk.js","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\nimport {Helmet} from 'react-helmet';\nimport cookie from 'react-cookies';\n\n/* global cv */\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        //Connect to the socket-channel for slaves\n        this.slaveChannel = io('/slaveChannel');\n        this.state = {\n            id: cookie.load('token'),\n        };\n    }\n\n    componentDidMount() {\n        console.log(\"my state:  \" + JSON.stringify(this.state));\n        this.slaveChannel.emit('slaveJoin', this.state\n        );\n        this.slaveChannel.on('setState', (state) => {\n            console.log(JSON.stringify(state));\n            this.setState(state);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <style>{`body {background-color: ${this.state.color}; }`}</style>\n                </Helmet>\n                <h1>Thanks!</h1>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import axios from 'axios'\n\n// let ax = axios.create('localhost:8004');\nlet ax = axios.create('penocw04.student.cs.kuleuven.be');\n\n\nexport default ax;\n","import React from 'react';\nimport axios from '../../common/services/httpService';\nimport {Redirect} from \"react-router-dom\";\nimport io from 'socket.io-client'\nimport './login.css'\nimport 'reactstrap'\n\n// merk op dat je op de master zou kunnen komen, als je op login geraakt nadat een master heeft geconnect\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        //Binding allows the function to access the state of this component, no matter where it is invoked\n        this.send = this.send.bind(this);\n        this.no = this.no.bind(this);\n        this.yes = this.yes.bind(this);\n        this.getOS = this.getOS.bind(this);\n        //This allows us to display different pages without reloading\n        this.state = {\n            OS: \"\",\n            Browser: \"\",\n            timeDiff: 0,\n            latency: 0,\n            timeDiffSocket: 0,\n            KULNetwork: false,\n            toEnd: false,\n            adjustedLatency: false\n        };\n        // connect to the socket channel for login-clients\n        this.loginChannel = io('/loginChannel');\n        axios.get('/login').then((res) => {\n        });\n    }\n\n    getOS() {\n        this.OSName = '';\n        if (navigator.appVersion.indexOf(\"Mobile\") !== -1) {\n            if (navigator.appVersion.indexOf(\"iPhone\") !== -1) this.OSName = \"IOS\";\n            if (navigator.appVersion.indexOf(\"Android\") !== -1) this.OSName = \"Android\";\n        } else {\n            if (navigator.appVersion.indexOf(\"X11\") !== -1) this.OSName = \"UNIX\";\n            if (navigator.appVersion.indexOf(\"Linux\") !== -1) this.OSName = \"Linux\";\n            if (navigator.appVersion.indexOf(\"Mac\") !== -1) this.OSName = \"MacOS\";\n            if (navigator.appVersion.indexOf(\"Win\") !== -1) this.OSName = \"Windows\";\n        }\n        return this.OSName\n    }\n\n    getBrowser() {\n        this.BrowserVersion = '';\n        if (navigator.appVersion.indexOf(\"Opera\") !== -1) this.BrowserVersion = \"Opera\";\n        else if (navigator.appVersion.indexOf(\"Edge\") !== -1) this.BrowserVersion = \"Edge\";\n        else if (navigator.appVersion.indexOf(\"Chrome\") !== -1) this.BrowserVersion = \"Chrome\";\n        else if (navigator.appVersion.indexOf(\"Safari\") !== -1) this.BrowserVersion = \"Safari\";\n        else if (navigator.appVersion.indexOf(\"FireFox\") !== -1) this.BrowserVersion = \"FireFox\";\n        else if (navigator.appVersion.indexOf(\"MSIE\") !== -1) this.BrowserVersion = \"Internet Explorer\";\n        else if (navigator.appCodeName.indexOf(\"Mozilla\") !== -1) this.BrowserVersion = \"Firefox\";\n        return this.BrowserVersion\n    }\n\n\n    componentDidMount() {\n        //Latency\n        setInterval(() => {\n            this.startTime = Date.now();\n            this.loginChannel.emit('a');\n        }, 2000);\n        this.loginChannel.on('b', () => {\n\n            let now = Date.now();\n            console.log('this.startTime: ' + this.startTime);\n            console.log('date.now: ' + now);\n            \n            this.totalLatency = Date.now() - this.startTime;\n            if (this.state.adjustedLatency) {\n                console.log(\"in if from there\");\n                console.log(\"this.state.latency: \" + this.state.latency);\n                console.log(\"this.totalLatency: \" + this.totalLatency);\n                console.log(\"formula in state: \" + 0.5 * this.state.latency + 0.5 * this.totalLatency / 2);\n                this.setState({latency: 0.5 * this.state.latency + 0.5 * this.totalLatency / 2}) //0.5 to cancel random peaks\n            } else {\n                console.log(\"first time in else\");\n                console.log(\"lateny gonna be: \" + this.totalLatency/2);\n                this.setState({\n                    latency: this.totalLatency / 2,\n                    adjustedLatency: true\n                })\n            }\n        });\n        //OS\n        let OS = this.getOS();\n        console.log(\"OS: \" + OS);\n        this.setState({OS: OS});\n\n        //BROWSER\n        let browser = this.getBrowser();\n        console.log(\"browser: \" + browser);\n        this.setState({Browser: browser});\n\n        //SOCKET TIMEDIFF\n\n        //WORLDAPI\n        let http = new XMLHttpRequest();\n        http.open(\"GET\", \"http://worldtimeapi.org/api/ip\", true);\n        http.send();\n        http.onreadystatechange = function () {\n            if (http.readyState === 4 && http.status === 200) {\n                let atomdata = JSON.parse(http.responseText);\n                let atomtime = new Date(atomdata.datetime);\n                let time = new Date();\n                let difference = (time - atomtime) / 1000;\n                console.log(difference);\n                this.setState({timeDiff: difference})\n            }\n        }.bind(this);\n        this.loginChannel.on('setState', (state) => {\n            console.log(JSON.stringify(state));\n            this.setState(state);\n        });\n        this.setState({OS: this.OSName});\n        this.setState({Browser: this.BrowserVersion})\n    }\n\n    //When the master button is clicked, switch to master, master is not already occupied.\n\n    //When the slave button is clicked, switch to slave\n    send() {\n        this.loginChannel.emit('userData', {\n            OS: this.state.OS,\n            Browser: this.state.Browser,\n            timeDiff: this.state.timeDiff,\n            KULNetwork: this.state.KULNetwork,\n            latency: this.state.latency,\n            clientTime: new Date().getTime()\n        });\n        this.setState({\n            toEnd: true,\n        })\n    }\n\n    yes() {\n        this.setState({KULNetwork: true})\n    }\n\n    no() {\n        this.setState({KULNetwork: false})\n    }\n\n\n    render() {\n        if (this.state.toEnd === true) {\n            return <Redirect to='/slave'/>\n        }\n\n        return (\n            <div>\n                <ul>\n                    <li> {\"Your OS: \" + this.state.OS} </li>\n                    <li> {\"Your browser: \" + this.state.Browser} </li>\n                    <li> {\"Your latency: \" + this.state.latency} </li>\n                    <li>  {\"Time difference with socket: \" + this.state.timeDiffSocket} </li>\n                    <li>  {\"Time difference with WTA: \" + this.state.timeDiff} </li>\n                </ul>\n                <div>\n                    <h3>\n                        {\"Are you currently connected to the KUL network?\"}\n                    </h3>\n                    <button name='yes' onClick={this.yes}>\n                        Yes\n                    </button>\n                    <button name='no' onClick={this.no}>\n                        No\n                    </button>\n                </div>\n                <div>\n                    <h3>\n                        {\"Thank You\"}\n                    </h3>\n                    <button name='send' onClick={this.send}>\n                        Send\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React  from 'react'\nimport {Route, Switch, MemoryRouter} from 'react-router'\nimport slave from './slave/containers/slave'\nimport login from './login/containers/login'\n\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <main>\n                <MemoryRouter>\n                    <Switch>\n                        <Route exact path='/' component={login}/>\n                        <Route path='/slave' component={slave}/>\n                    </Switch>\n                </MemoryRouter>\n            </main>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all React tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}