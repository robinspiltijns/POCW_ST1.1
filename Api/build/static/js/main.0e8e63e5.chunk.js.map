{"version":3,"sources":["slave/containers/slave.js","common/services/httpService.js","login/containers/login.js","App.js","serviceWorker.js","index.js"],"names":["App","slaveChannel","io","state","id","cookie","load","console","log","JSON","stringify","this","emit","on","setState","Helmet","color","React","Component","ax","axios","create","initialChecks","checks","interval","sendA","bind","start","backgroundColor","offset","OS","Browser","latency","KULNetwork","toEnd","adjustedLatency","chosen","loginChannel","get","then","res","OSName","navigator","appVersion","indexOf","BrowserVersion","appCodeName","serverTime","now","Date","startTime","currentOffset","date","setTimeout","to","style","height","onClick","exact","path","component","login","slave","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e8e63e5.chunk.js","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\nimport {Helmet} from 'react-helmet';\nimport cookie from 'react-cookies';\n\n/* global cv */\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        //Connect to the socket-channel for slaves\n        this.slaveChannel = io('/slaveChannel');\n        this.state = {\n            id: cookie.load('token'),\n        };\n    }\n\n    componentDidMount() {\n        console.log(\"my state:  \" + JSON.stringify(this.state));\n        this.slaveChannel.emit('slaveJoin', this.state\n        );\n        this.slaveChannel.on('setState', (state) => {\n            console.log(JSON.stringify(state));\n            this.setState(state);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <style>{`body {background-color: ${this.state.color}; }`}</style>\n                </Helmet>\n                <h1>Thanks! You can close this page now.</h1>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import axios from 'axios'\n\n// let ax = axios.create('localhost:8004');\nlet ax = axios.create('penocw04.student.cs.kuleuven.be');\n\n\nexport default ax;\n","import React from 'react';\nimport axios from '../../common/services/httpService';\nimport {Redirect} from \"react-router-dom\";\nimport io from 'socket.io-client'\nimport './login.css'\nimport 'reactstrap'\n\n// merk op dat je op de master zou kunnen komen, als je op login geraakt nadat een master heeft geconnect\nconst n = 2; //amount of checkboxes\nlet initialChecks = 0;\nlet checks = 0;\nlet interval = 500;\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.sendA = this.sendA.bind(this);\n        this.start = this.start.bind(this);\n        //This allows us to display different pages without reloading\n        this.state = {\n            backgroundColor: 'WHITE',\n            offset: 0,\n            OS: \"\",\n            Browser: \"\",\n            latency: 0,\n            KULNetwork: false,\n            toEnd: false,\n            adjustedLatency: false,\n            chosen: false\n        };\n        // connect to the socket channel for login-clients\n        this.loginChannel = io('/loginChannel');\n        axios.get('/login').then((res) => {\n        });\n    }\n\n    getOS() {\n        this.OSName = '';\n        if (navigator.appVersion.indexOf(\"Mobile\") !== -1) {\n            if (navigator.appVersion.indexOf(\"iPhone\") !== -1) this.OSName = \"IOS\";\n            if (navigator.appVersion.indexOf(\"Android\") !== -1) this.OSName = \"Android\";\n        } else {\n            if (navigator.appVersion.indexOf(\"X11\") !== -1) this.OSName = \"UNIX\";\n            if (navigator.appVersion.indexOf(\"Linux\") !== -1) this.OSName = \"Linux\";\n            if (navigator.appVersion.indexOf(\"Mac\") !== -1) this.OSName = \"MacOS\";\n            if (navigator.appVersion.indexOf(\"Win\") !== -1) this.OSName = \"Windows\";\n        }\n        return this.OSName\n    }\n\n    getBrowser() {\n        this.BrowserVersion = '';\n        if (navigator.appVersion.indexOf(\"Opera\") !== -1) this.BrowserVersion = \"Opera\";\n        else if (navigator.appVersion.indexOf(\"Edge\") !== -1) this.BrowserVersion = \"Edge\";\n        else if (navigator.appVersion.indexOf(\"Chrome\") !== -1) this.BrowserVersion = \"Chrome\";\n        else if (navigator.appVersion.indexOf(\"Safari\") !== -1) this.BrowserVersion = \"Safari\";\n        else if (navigator.appVersion.indexOf(\"FireFox\") !== -1) this.BrowserVersion = \"FireFox\";\n        else if (navigator.appVersion.indexOf(\"MSIE\") !== -1) this.BrowserVersion = \"Internet Explorer\";\n        else if (navigator.appCodeName.indexOf(\"Mozilla\") !== -1) this.BrowserVersion = \"Firefox\";\n        return this.BrowserVersion\n    }\n\n\n    componentDidMount() {\n        this.offset = 0;\n        //Latency\n        this.sendA();\n        this.loginChannel.on('b', (serverTime) => {\n            let now = Date.now();\n            this.latency = (now - this.startTime)/2;\n            this.currentOffset = now - serverTime - this.latency;\n            console.log('latency: ' + this.latency)\n            console.log('latest offset: ' + this.currentOffset)\n            initialChecks++;\n            if(initialChecks > 10) { //initial checks give inaccurate values\n                console.log('growing factor in avg: ' + checks*this.offset)\n                this.offset = (checks*this.offset + this.currentOffset)/(checks +1);\n                console.log('latest average: ' + this.offset)\n                checks++\n            } else {\n                console.log('in initial checks')\n            }\n            this.setState({\n                offset: this.offset\n            })\n            interval = this.latency*20\n        })\n        this.loginChannel.on('go', (date) => {\n            this.setState({backgroundColor: 'GREEN'});\n            setTimeout(() => {\n                this.setState({backgroundColor: 'BLUE'})\n            }, (date - this.state.offset - Date.now()))\n        })\n    }\n\n    sendA() {\n        setTimeout(() => {\n            this.startTime = Date.now();\n            this.loginChannel.emit('a');\n            this.sendA()\n        }, interval)\n    }\n\n    start() {\n        this.loginChannel.emit('start')\n    }\n\n    render() {\n        if (this.state.toEnd === true) {\n            return <Redirect to='/slave'/>\n        }\n\n        return (\n            <div style={{\n                backgroundColor: this.state.backgroundColor,\n                height: 1000\n            }}>\n                <div>{this.state.offset}</div>\n                <button onClick={this.start}> START </button>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React  from 'react'\nimport {Route, Switch, MemoryRouter} from 'react-router'\nimport slave from './slave/containers/slave'\nimport login from './login/containers/login'\n\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <main>\n                <MemoryRouter>\n                    <Switch>\n                        <Route exact path='/' component={login}/>\n                        <Route path='/slave' component={slave}/>\n                    </Switch>\n                </MemoryRouter>\n            </main>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all React tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}