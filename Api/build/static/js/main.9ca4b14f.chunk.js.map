{"version":3,"sources":["slave/containers/slave.js","login/components/Canvas.js","common/services/httpService.js","login/components/Animation.js","login/containers/login.js","App.js","serviceWorker.js","index.js"],"names":["App","slaveChannel","io","state","id","cookie","load","console","log","JSON","stringify","this","emit","on","setState","Helmet","color","React","Component","Canvas","axios","create","props","canvasRef","createRef","angle","canvas","current","ctx","getContext","width","height","save","beginPath","clearRect","translate","rotate","Math","PI","fillStyle","fillRect","restore","font","fillText","toString","ref","Animation","frame","updateAnimationState","bind","fpsAnimation","reset","setInterval","running","prevState","rAF","requestAnimationFrame","cancelAnimationFrame","initialChecks","checks","interval","sendA","start","toggleAnimation","syncAnimation","resetAnimation","getCurrentFrame","animation","animate","backgroundColor","offset","OS","Browser","latency","toEnd","browserDimensions","window","innerWidth","innerHeight","loginChannel","serverTime","now","Date","startTime","currentOffset","date","setTimeout","getFrame","to","style","onClick","exact","path","component","login","slave","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ca4b14f.chunk.js","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\nimport {Helmet} from 'react-helmet';\nimport cookie from 'react-cookies';\n\n/* global cv */\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        //Connect to the socket-channel for slaves\n        this.slaveChannel = io('/slaveChannel');\n        this.state = {\n            id: cookie.load('token'),\n        };\n    }\n\n    componentDidMount() {\n        console.log(\"my state:  \" + JSON.stringify(this.state));\n        this.slaveChannel.emit('slaveJoin', this.state\n        );\n        this.slaveChannel.on('setState', (state) => {\n            console.log(JSON.stringify(state));\n            this.setState(state);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <style>{`body {background-color: ${this.state.color}; }`}</style>\n                </Helmet>\n                <h1>Thanks! You can close this page now.</h1>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React from 'react'\n\nclass Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    componentDidUpdate() {\n        // Draws a square in the middle of the canvas rotated\n        // around the centre by this.props.angle\n        const { angle } = this.props;\n        const canvas = this.canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const width = canvas.width;\n        const height = canvas.height;\n        ctx.save();\n        ctx.beginPath();\n        ctx.clearRect(0, 0, width, height);\n        ctx.translate(width / 2, height / 2);\n        ctx.rotate((angle * Math.PI) / 180);\n        if(angle > 90 && angle < 270 ) {\n            ctx.fillStyle = 'RED';\n        } else {\n            ctx.fillStyle = '#4397AC';\n        }\n        ctx.fillRect(-width / 4, -height / 4, width / 2, height / 2);\n        ctx.restore();\n        ctx.font = '40px Arial';\n        ctx.fillText(angle.toString(),0,150);\n    }\n\n    render() {\n        return <canvas width=\"300\" height=\"300\" ref={this.canvasRef} />;\n    }\n}\n\nexport default Canvas\n","import axios from 'axios'\n\n// let ax = axios.create('localhost:8004');\nlet ax = axios.create('penocw04.student.cs.kuleuven.be');\n\n\nexport default ax;\n","import Canvas from './Canvas'\nimport React from 'react'\n\nclass Animation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            angle: 0,\n            frame: 0,\n        };\n        this.updateAnimationState = this.updateAnimationState.bind(this);\n        this.fpsAnimation = this.fpsAnimation.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n\n    componentDidMount() {\n        // this.rAF = requestAnimationFrame(this.updateAnimationState);\n        this.fpsAnimation()\n    }\n\n    fpsAnimation() {\n\n            setInterval(() => {\n                if(this.props.running) {\n                    this.setState(prevState => ({\n                        angle: (prevState.angle + 1)%360,\n                        frame: (prevState.frame + 1)\n                    }));\n                }\n            }, 32)\n    }\n\n    updateAnimationState() {\n\n            this.setState(prevState => ({angle: prevState.angle + 1}));\n            this.rAF = requestAnimationFrame(this.updateAnimationState); //test dit nog\n\n    }\n\n    reset() {\n        this.setState({\n            angle: 0,\n            frame: 0\n        })\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.rAF);\n    }\n\n    getFrame() {\n        return this.state.frame\n    }\n\n    render() {\n        return <Canvas angle={this.state.angle} />;\n    }\n}\n\nexport default Animation\n","import React from 'react';\nimport axios from '../../common/services/httpService';\nimport {Redirect} from \"react-router-dom\";\nimport io from 'socket.io-client'\nimport './login.css'\nimport 'reactstrap'\nimport Animation from \"../components/Animation\";\n\n// merk op dat je op de master zou kunnen komen, als je op login geraakt nadat een master heeft geconnect\nconst n = 2; //amount of checkboxes\nlet initialChecks = 0;\nlet checks = 0;\nlet interval = 500;\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.sendA = this.sendA.bind(this);\n        this.start = this.start.bind(this);\n        this.toggleAnimation = this.toggleAnimation.bind(this);\n        this.syncAnimation = this.syncAnimation.bind(this);\n        this.resetAnimation = this.resetAnimation.bind(this);\n        this.getCurrentFrame = this.getCurrentFrame.bind(this);\n        //This allows us to display different pages without reloading\n        this.canvas = React.createRef();\n        this.animation = React.createRef();\n        this.state = {\n            animate: false,\n            backgroundColor: 'WHITE',\n            offset: 0,\n            OS: \"\",\n            Browser: \"\",\n            latency: 0,\n            toEnd: false,\n            browserDimensions: [window.innerWidth, window.innerHeight]\n        };\n        // connect to the socket channel for login-clients\n        this.loginChannel = io('/loginChannel');\n    }\n\n    // getOS() {\n    //     this.OSName = '';\n    //     if (navigator.appVersion.indexOf(\"Mobile\") !== -1) {\n    //         if (navigator.appVersion.indexOf(\"iPhone\") !== -1) this.OSName = \"IOS\";\n    //         if (navigator.appVersion.indexOf(\"Android\") !== -1) this.OSName = \"Android\";\n    //     } else {\n    //         if (navigator.appVersion.indexOf(\"X11\") !== -1) this.OSName = \"UNIX\";\n    //         if (navigator.appVersion.indexOf(\"Linux\") !== -1) this.OSName = \"Linux\";\n    //         if (navigator.appVersion.indexOf(\"Mac\") !== -1) this.OSName = \"MacOS\";\n    //         if (navigator.appVersion.indexOf(\"Win\") !== -1) this.OSName = \"Windows\";\n    //     }\n    //     return this.OSName\n    // }\n\n    // getBrowser() {\n    //     this.BrowserVersion = '';\n    //     if (navigator.appVersion.indexOf(\"Opera\") !== -1) this.BrowserVersion = \"Opera\";\n    //     else if (navigator.appVersion.indexOf(\"Edge\") !== -1) this.BrowserVersion = \"Edge\";\n    //     else if (navigator.appVersion.indexOf(\"Chrome\") !== -1) this.BrowserVersion = \"Chrome\";\n    //     else if (navigator.appVersion.indexOf(\"Safari\") !== -1) this.BrowserVersion = \"Safari\";\n    //     else if (navigator.appVersion.indexOf(\"FireFox\") !== -1) this.BrowserVersion = \"FireFox\";\n    //     else if (navigator.appVersion.indexOf(\"MSIE\") !== -1) this.BrowserVersion = \"Internet Explorer\";\n    //     else if (navigator.appCodeName.indexOf(\"Mozilla\") !== -1) this.BrowserVersion = \"Firefox\";\n    //     return this.BrowserVersion\n    // }\n\n\n    componentDidMount() {\n        this.offset = 0;\n        //Latency\n        this.sendA();\n        this.loginChannel.on('b', (serverTime) => {\n            let now = Date.now();\n            this.latency = (now - this.startTime)/2;\n            this.currentOffset = now - serverTime - this.latency;\n           // console.log('latency: ' + this.latency)\n          //  console.log('latest offset: ' + this.currentOffset)\n            initialChecks++;\n            if(initialChecks > 10) { //initial checks give inaccurate values\n               // console.log('growing factor in avg: ' + checks*this.offset)\n                this.offset = (checks*this.offset + this.currentOffset)/(checks +1);\n               // console.log('latest average: ' + this.offset)\n                checks++\n            } else {\n               // console.log('in initial checks')\n            }\n            this.setState({\n                offset: this.offset\n            })\n            interval = this.latency*20\n        })\n        this.loginChannel.on('go', (date) => {\n            this.setState({backgroundColor: 'GREEN'});\n            console.log('date: ' + date)\n            console.log('offset: ' + this.state.offset)\n            console.log('now: ' + Date.now())\n            console.log('total: ' + date - this.state.offset - Date.now())\n            setTimeout(() => {\n                this.setState({backgroundColor: 'BLUE'})\n            }, (date + this.state.offset - Date.now()))\n        });\n        this.loginChannel.on('startAnimation', (startTime) => {\n            this.resetAnimation();\n            setTimeout(() => {\n                this.setState({animate: 'true'})\n            }, (startTime + this.state.offset - Date.now()))\n        });\n        this.loginChannel.on('requestCurrentFrame', () => {\n            console.log(this.animation.current.getFrame())\n        })\n        }\n\n    sendA() {\n        setTimeout(() => {\n            this.startTime = Date.now();\n            this.loginChannel.emit('a');\n            this.sendA()\n        }, interval)\n    }\n\n    start() {\n        this.loginChannel.emit('start')\n    }\n\n    toggleAnimation() {\n        this.setState(prevState => ({animate: !prevState.animate}))\n    }\n\n    syncAnimation() { //NOTE: SOETKIN HAAR GSM WORDT LOS INGEHAALD DOOR DIE VAN MIJ\n        this.loginChannel.emit('requestAnimation')\n    }\n\n    getCurrentFrame() {\n\n    }\n\n    resetAnimation() {\n        this.state.animate = false;\n        this.animation.current.reset();\n    }\n\n    render() {\n        if (this.state.toEnd === true) {\n            return <Redirect to='/slave'/>\n        }\n\n        return (\n            <div style={{\n                backgroundColor: this.state.backgroundColor,\n                height: 1000\n            }}>\n                <div>{this.state.offset}</div>\n                <div>\n                    <button onClick={this.start}> START </button>\n                    <button onClick={this.toggleAnimation}>Toggle Animation</button>\n                    <button onClick={this.syncAnimation}>Sync Animation</button>\n                    <button onClick={this.resetAnimation}>Reset Animation</button>\n                </div>\n                <Animation ref={this.animation} running = {this.state.animate}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React  from 'react'\nimport {Route, Switch, MemoryRouter} from 'react-router'\nimport slave from './slave/containers/slave'\nimport login from './login/containers/login'\n\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <main>\n                <MemoryRouter>\n                    <Switch>\n                        <Route exact path='/' component={login}/>\n                        <Route path='/slave' component={slave}/>\n                    </Switch>\n                </MemoryRouter>\n            </main>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all React tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}