{"version":3,"sources":["login/resources/nyan.gif","slave/containers/slave.js","common/services/httpService.js","login/containers/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","slaveChannel","io","state","id","cookie","load","console","log","JSON","stringify","this","emit","on","setState","Helmet","color","React","Component","ax","axios","create","slave","bind","OS","toSlave","loginChannel","masterOccupied","get","then","res","navigator","appVersion","indexOf","OSName","toOverview","to","name","onClick","exact","path","component","login","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,wLCuC5BC,E,YA/BX,aAAe,IAAD,8BACV,+CAEKC,aAAeC,IAAG,iBACvB,EAAKC,MAAQ,CACTC,GAAIC,IAAOC,KAAK,UALV,E,iFASO,IAAD,OAChBC,QAAQC,IAAI,cAAgBC,KAAKC,UAAUC,KAAKR,QAChDQ,KAAKV,aAAaW,KAAK,YAAaD,KAAKR,OAEzCQ,KAAKV,aAAaY,GAAG,YAAY,SAACV,GAC9BI,QAAQC,IAAIC,KAAKC,UAAUP,IAC3B,EAAKW,SAASX,Q,+BAKlB,OACI,6BACI,kBAACY,EAAA,OAAD,KACI,iEAAmCJ,KAAKR,MAAMa,MAA9C,SAEJ,4C,GA3BEC,IAAMC,W,gBCATC,E,OAHNC,EAAMC,OAAO,mCC4FPrB,G,0BAnFX,aAAe,IAAD,8BACV,+CAIKsB,MAAQ,EAAKA,MAAMC,KAAX,gBAGb,EAAKpB,MAAQ,CACTqB,GAAI,GACJC,SAAS,GAOb,EAAKC,aAAexB,IAAG,iBAKvB,EAAKwB,aAAab,GAAG,2BAA2B,SAACV,GAC7C,EAAKW,SAAS,CAACa,eAAgBxB,OAGnCiB,EAAMQ,IAAI,UAAUC,MAAK,SAACC,OA1BhB,E,iFA+BVvB,QAAQC,IAAIuB,YACkC,IAA1CA,UAAUC,WAAWC,QAAQ,YACiB,IAA1CF,UAAUC,WAAWC,QAAQ,YAAgBtB,KAAKuB,OAAO,QACd,IAA3CH,UAAUC,WAAWC,QAAQ,aAAiBtB,KAAKuB,OAAO,cAEnB,IAAvCH,UAAUC,WAAWC,QAAQ,SAAatB,KAAKuB,OAAO,SACb,IAAzCH,UAAUC,WAAWC,QAAQ,WAAetB,KAAKuB,OAAO,UACjB,IAAvCH,UAAUC,WAAWC,QAAQ,SAAatB,KAAKuB,OAAO,UACf,IAAvCH,UAAUC,WAAWC,QAAQ,SAAatB,KAAKuB,OAAO,YAI9DvB,KAAKG,SAAS,CAACU,GAAIb,KAAKuB,W,8BAOxBvB,KAAKG,SAAS,CACVW,SAAS,EACTU,YAAY,M,+BAMhB,OAA2B,IAAvBxB,KAAKR,MAAMsB,QACJ,kBAAC,IAAD,CAAUW,GAAG,WAIpB,6BACI,4BACK,cAAgBL,UAAUC,YAE/B,4BACK,UAAYrB,KAAKR,MAAMqB,IAE5B,6BAEI,4BAAQa,KAAK,QAAQC,QAAS3B,KAAKW,OAAnC,SAKCX,KAAKR,MAAMwB,gBAAkB,6D,GA9EhCV,IAAMC,YCWTlB,E,iLAbP,OACI,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWnB,W,GARtCL,IAAMC,W,OCMJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBpB,WACrBA,UAAUqB,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.73ca66ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nyan.5da985f3.gif\";","import React from 'react';\nimport io from 'socket.io-client';\nimport {Helmet} from 'react-helmet';\nimport cookie from 'react-cookies';\n\n/* global cv */\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        //Connect to the socket-channel for slaves\n        this.slaveChannel = io('/slaveChannel');\n        this.state = {\n            id: cookie.load('token'),\n        };\n    }\n\n    componentDidMount() {\n        console.log(\"my state:  \" + JSON.stringify(this.state));\n        this.slaveChannel.emit('slaveJoin', this.state\n        );\n        this.slaveChannel.on('setState', (state) => {\n            console.log(JSON.stringify(state));\n            this.setState(state);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <style>{`body {background-color: ${this.state.color}; }`}</style>\n                </Helmet>\n                <h1>Thanks!</h1>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import axios from 'axios'\n\n// let ax = axios.create('localhost:8004');\nlet ax = axios.create('penocw04.student.cs.kuleuven.be');\n\n\nexport default ax;\n","import React from 'react';\nimport axios from '../../common/services/httpService';\nimport {Redirect} from \"react-router-dom\";\nimport Helmet from 'react-helmet'\nimport nyan from '../resources/nyan.gif'\nimport io from 'socket.io-client'\nimport './login.css'\nimport 'reactstrap'\n\n// merk op dat je op de master zou kunnen komen, als je op login geraakt nadat een master heeft geconnect\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        //Binding allows the function to access the state of this component, no matter where it is invoked\n\n\n        this.slave = this.slave.bind(this);\n\n        //This allows us to display different pages without reloading\n        this.state = {\n            OS: \"\",\n            toSlave: false,\n\n\n        };\n\n\n        // connect to the socket channel for login-clients\n        this.loginChannel = io('/loginChannel');\n\n        // boolean checking whether master is occupied\n\n        // server informing client whether master is occupied\n        this.loginChannel.on('master occupation state', (state)=>{\n            this.setState({masterOccupied: state})\n        });\n        //this http request asks the server to update this client's token, which will be used to identify this client\n        axios.get('/login').then((res) => {\n        });\n    }\n\n    componentDidMount() {\n        console.log(navigator);\n        if (navigator.appVersion.indexOf(\"Mobile\")!==-1) {\n            if (navigator.appVersion.indexOf(\"iPhone\")!==-1) this.OSName=\"IOS\";\n            if (navigator.appVersion.indexOf(\"Android\")!==-1) this.OSName=\"Android\";\n        } else {\n            if (navigator.appVersion.indexOf(\"X11\")!==-1) this.OSName=\"UNIX\";\n            if (navigator.appVersion.indexOf(\"Linux\")!==-1) this.OSName=\"Linux\";\n            if (navigator.appVersion.indexOf(\"Mac\")!==-1) this.OSName=\"MacOS\";\n            if (navigator.appVersion.indexOf(\"Win\")!==-1) this.OSName=\"Windows\";\n        }\n\n\n        this.setState({OS: this.OSName})\n    }\n\n    //When the master button is clicked, switch to master, master is not already occupied.\n\n    //When the slave button is clicked, switch to slave\n    slave() {\n        this.setState({\n            toSlave: true,\n            toOverview: false,\n        })\n    }\n\n\n    render() {\n        if (this.state.toSlave === true) {\n            return <Redirect to='/slave'/>\n        }\n\n        return (\n            <div>\n                <h1>\n                    {\"You are on \" + navigator.appVersion}\n                </h1>\n                <h1>\n                    {\"We get \" + this.state.OS}\n                </h1>\n                <div >\n\n                    <button name='slave' onClick={this.slave}>\n                        Send\n                    </button>\n\n                </div>\n                    {this.state.masterOccupied && <h2>Master has been occupied</h2>}\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React  from 'react'\nimport {Route, Switch, MemoryRouter} from 'react-router'\nimport slave from './slave/containers/slave'\nimport login from './login/containers/login'\n\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <main>\n                <MemoryRouter>\n                    <Switch>\n                        <Route exact path='/' component={login}/>\n                        <Route path='/slave' component={slave}/>\n                    </Switch>\n                </MemoryRouter>\n            </main>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all React tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}